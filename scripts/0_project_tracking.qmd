---
title: "Tundra & Boreal Plant Species Trait Spaces"
format: 
  html:
    theme: flatly
    toc: true
    toc-location: left
    css: custom.css
editor: visual
---

# Aim

This document outlines the steps in the analysis of Paper 3: Tundra & Boreal Plant Species Trait Spaces. The project aims to buid trait spaces for boreal and tundra plant species and answer the following questions:

1.  Are boreal species functionally distinct from Arctic species?
2.  Which traits drive most of the variation between categories?
3.  Which traits are more relevant in defining 'borealness' across functional groups?

## File Structure

| Name                                      | Function                                                                 |
|------------------------------------|------------------------------------|
| 0_setup.R                                 | Load all necessary packages and functions                                |
| 1.1_TRY_filtering.R                       | Filter TRY records to only include those in the boreal and tundra biomes |
| 1.2_TRY_species_list.R                    | Clean the species list extracted from TRY                                |
| 2.1_GBIF_biome_boundary_distance.R        | Calculate distances to biome boundaries for each species                 |
| 3.1_exploration_biome_boundary_distance.R | Explore & validate output of script 2.1                                  |

```{r packages}
#| label: packages
#| echo: false
#| include: false
library(here)
source(here("scripts", "0_setup.R"))
source(here("scripts", "1.1_TRY_filtering.R"))
source(here("scripts", "1.2_TRY_species_list.R"))
source(here("scripts", "3.1_exploration_biome_boundary_distance.R"))
```

# Filtering TRY Records (1.1)

This script filtered out TRY records which fall outside the boundaries of the boreal forest and tundra biomes.

The raw TRY file contained `r nrow(try_raw)` , of which `r nrow(boreal_try_data)` were in the Boreal biome and `r nrow(tundra_try_data)` in the Tundra biome. After filtering out points falling outside of either biome, `r nrow(try_filtered)` points were left.

```{r points in biomes}
#| label: fig-points-in-biomes
#| fig-cap: "Distribution of TRY datapoints across the Boreal and Tundra WWF biomes"
#| fig-width: 7
#| fig-height: 6
#| out-width: "100%"
#| echo: false
#| message: false
#| warning: false

# Get world basemap
world <- ne_countries(scale = "medium", returnclass = "sf")

# Define polar projection
proj_choice<-"+proj=laea +lat_0=90 +lon_0=0 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs "

# Transform all spatial objects to the polar projection
world_polar <- st_transform(world, crs = proj_choice)
boreal_forest_polar <- st_transform(boreal_forest, crs = proj_choice)
tundra_polar <- st_transform(tundra, crs = proj_choice)
try_sf_polar <- st_transform(try_sf, crs = proj_choice)

# Define custom colors for biomes
mycols <- c("forestgreen", "skyblue")

# Combine the boreal and tundra data for the legend
biome_data <- rbind(
  cbind(st_drop_geometry(data.frame(BIOME = 6)), st_geometry(boreal_forest_polar)) |> st_sf(),
  cbind(st_drop_geometry(data.frame(BIOME = 11)), st_geometry(tundra_polar)) |> st_sf())

ggplot() +
  # Add biomes
  geom_sf(data = biome_data, aes(fill = factor(BIOME)), color = NA) +
  # Add country outlines
  geom_sf(data = world_polar, fill = NA, color = "darkgray", size = 0.2) +
  # Add points
  geom_sf(data = try_sf_polar[boreal_indices,], color = "darkgreen", size = 0.8, alpha = 0.7) +
  geom_sf(data = try_sf_polar[tundra_indices,], color = "blue", size = 0.8, alpha = 0.7) +
  # Set extent
  coord_sf(crs = proj_choice, 
           ylim = c(-703086, 7071423), 
           xlim = c(-505347.4, 8526158),
           expand = FALSE,
           clip = "on") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        legend.position = c(0.2, 0.9),
        plot.title = element_text(face = "bold"),
        panel.grid.major = element_line(color = "gray90", linetype = "dashed"),
        panel.grid.minor = element_blank()) +
  # Add custom colours and legend values
  scale_fill_manual(values = mycols,
                    labels = c("Boreal forest", "Arctic tundra"),
                    name = "Biome") +
  # Add point legend
  guides(fill = guide_legend(title = "Biome"),
         color = guide_legend(title = "Records"))
```

# Species List from TRY (1.2)

The filtered `r nrow(try_filtered)` points identified **`r nrow(all_filtered_species)`** different species. This list underwent the following cleaning steps, based on the "SpeciesName" column:

1.  Removed `r sum(grepl("\\bsp\\.$|\\bsp\\b", all_filtered_species$SpeciesName))` records with .sp endings
2.  Removed `r sum(all_filtered_species$SpeciesName %in% c("Grass", "Fern", "Unknown"))` records names "Grass", "Fern" or "Unknown"
3.  Removed `r sum(all_filtered_species$SpeciesName %in% c("Hieracium sect."))` record named "Hieracium sect."
4.  Removed `r sum(!grepl("\\s", all_filtered_species$SpeciesName) & nchar(all_filtered_species$SpeciesName) > 2)` records with single word names
5.  Corrected a record named "Eri schi" to *Eriophorum scheuchzeri*

After these cleaning steps, `r nrow(all_filtered_species) - nrow(filtered_species_list_1)` records had been removed, leaving us with **`r nrow(filtered_species_list_1)`** records.

6.  Records of subspecies, varieties or sections were standardised to species level. In total `r nrow(subspecies_varieties)` subspecies, `r varieties_count` varieties and `r sections_count` sections were standardised to species level. After the removal of duplicate species names created from these cleaning steps, **`r nrow(filtered_species_list_2)`** unique records were left
7.  Checked for records with \> 2 words in the SpeciesName and found `r remaining_multi_word` records: `r unique(multi_word_names)` . These records were also standardised to species level.
8.  Removed 1 record called "*Hieracium*"
9.  The resulting list of **`r nrow(filtered_species_list_5)`** was run through a taxonomic checker, which found:
    -   `r nrow(unmatched)` as unmatched records (due to misspelling in names)
    -   `r nrow(fuzzy_matches)` fuzzy matches
    -   After unmatched and fuzzy records were handled and produced duplicate records were removed, the final list of species contained **`r nrow(corrected_species_list)`** unique species.

## Fuzzy matches check

The records with fuzzy matches were handled as follows:

```{r fuzzy-matches-table}
#| label: fuzzy-matches-table
#| tbl-cap: "Species with fuzzy matches requiring manual review"
#| echo: false
#| message: false
#| warning: false

# Create table with notes
fuzzy_table <- fuzzy_review |>
  mutate(Manual_Notes = case_when(
    Original == "Spirodela polyrrhiza" ~ "Spelling correction to Spirodela polyrhiza",
    Original == "Trichophorum caespitosum" ~ "Also found a species called T. cepitosum but may be entirely different species. Leave it up to GBIF taxon match and check after.", 
    Original == "Salix doniana" ~ "Most likely 'Salix purpurea x doniana', standardised to 'Salix purpurea' ",
    Original == "Silene samojedora" ~ "Spelling correction to matched name (Silene samojedorum)",
    Original == "Arctostaphylos alpinus" ~ "Leave it up to GBIF taxon match and check after",
    Original == "Salix myrtifolia" ~ "Spelling correction to Salix myrtillifolia",
    Original == "Nuphar spenneriana" ~ "Leave it up to GBIF taxon match and check after",
    Original == "Calamagrostis purpuras" ~ "Spelling correction to Calamagrostis purpurea",
    Original == "Silene arctica" ~ "Confusion over many possibilities, leave it up to GBIF",
    Original == "Pedicularis vertisilata" ~ "Spelling correction to Pedicularis verticillata",
    Original == "Peticites frigidus" ~ "Spelling correction to Petasites frigidus",
    Original == "Senecio atropurpuris" ~ "Spelling correction to Senecio atropurpureus",
    Original == "Gentia glauca" ~ "Spelling correction to Gentiana glauca",
    Original == "Loiselura procumbens" ~ "Fuzzy match possibly correct, leave it up to GBIF",
    Original == "Polemonium acutifolium" ~ "Spelling correction to Polemonium acutiflorum",
    Original == "Rumex lapponum" ~ "Spelling correction to Rumex lapponicus",
    Original == "Pedicularis vertillis" ~ "Spelling correction to Pedicularis verticillata",
    Original == "Sabulina rossii" ~ "Spelling correction to Sabulina rosei",
    Original == "Echinops crispus" ~ "Changed to synonym Echinops ritro",
    Original == "Cherleria biflora" ~ "Original name is correct",
    Original == "Salix fuscenses" ~ "Spelling correction to Salix fuscescens",
    Original == "Draba bila" ~ "Leave it up to GBIF",
    Original == "Salix laponicum" ~ "Spelling correction to Salix lapponum",
    Original == "Cherleria obtusiloba" ~ "Original name correct",
    Original == "Senecio atropupuris" ~ "Spelling correction to Senecio atropurpureus",
    Original == "Salix argyocarpon" ~ "Spelling correction to Salix argyrocarpa",
    Original == "Salix herbaceae-polaris" ~ "Standardised to species level Salix herbacea")) |>
  mutate(Color_Cat = case_when(str_detect(Manual_Notes, "Spelling correction") ~ "Spelling",
                               str_detect(Manual_Notes, "Original name") ~ "Original",
                               str_detect(Manual_Notes, "GBIF") ~ "GBIF",
                               str_detect(Manual_Notes, "Standardised") ~ "Standard",
                               .default = "Other")) |>
  select(`Original Name` = Original, 
         `Matched Name` = Matched, 
         `Notes` = Manual_Notes,
         Color_Cat)

# Create interactive table
DT::datatable(fuzzy_table,
  options = list(pageLength = 10,
                 lengthMenu = c(10, 25, 50, -1),
                 scrollX = TRUE,
                 dom = 'Bfrtip',
                 buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                 columnDefs = list(list(width = '200px', targets = 0),
                                   list(width = '200px', targets = 1),
                                   list(width = '300px', targets = 2),
                                   list(visible = FALSE, targets = 3))),
  extensions = 'Buttons',
  filter = 'top',
  rownames = FALSE,
  class = 'cell-border stripe hover') |>
  DT::formatStyle(columns = c('Original Name', 'Matched Name'),
                  fontStyle = 'italic') |>
  DT::formatStyle('Original Name','Color_Cat',
                  backgroundColor = styleEqual(c("Spelling", "Original", "GBIF", "Standard"),
                                               c("lightblue", "lightgreen", "lightpink", "plum")))
```

# Distance to Biome Boundary Calculations (2.1.)

To calculate the distance to biome boundary for each species in the cleaned species list, the following methods were attempted:

1.  Use occ_download() for the entire species list at once - crashed Franklin ❌
2.  Use occ_search() with maximum number of occurrences (200 000) ❌
    -   7 species were processed in \~7 hours =\> the whole species list would be processed in about a month
3.  Use occ_count() to count the number of occurrences for each species within a raster grid and calculate distances to boundaries from the cell centroids ❌
    -   After the 50th cell processed, I would get the message "This is not an efficient way to retrieve this data, please slow down or stop your script. Check the API documentation for a more efficient way..."
4.  Process the species list using occ_download() 50 species at a time 🥳
    -   This approach worked and produced the below classification of the species

```{r biome boundary table}
#| label: biome-boundary-table
#| tbl-cap: "Distances to biome boundaries for final species list from TRY"
#| echo: false
#| message: false
#| warning: false

# Display interactive table
interactive_table
```

The mean distance to biome boundary is distributed as follows:

```{r biome distance histogram}
#| label: fig-distance-histogram
#| fig-cap: "Distribution of mean distances to biome boundaries for all species"
#| fig-width: 8
#| fig-height: 5
#| echo: false
#| message: false
#| warning: false

# Calculate summary statistics
mean_dist <- mean(detailed_results$mean_distance_km, na.rm = TRUE)
median_dist <- median(detailed_results$mean_distance_km, na.rm = TRUE)

# Create histogram with annotations
ggplot(detailed_results, aes(x = mean_distance_km)) +
  geom_histogram(bins = 40, fill = "steelblue", alpha = 0.7, color = "white") +
  geom_vline(aes(xintercept = mean_dist), color = "red", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = median_dist), color = "orange", linetype = "dashed", size = 1) +
  annotate("text", x = mean_dist + 50, y = Inf, 
           label = paste("Mean:", round(mean_dist, 1), "km"), 
           vjust = 2, color = "red", size = 3.5) +
  annotate("text", x = median_dist - 50, y = Inf, 
           label = paste("Median:", round(median_dist, 1), "km"), 
           vjust = 2, color = "orange", size = 3.5) +
  labs(x = "Mean Distance (km)",
       y = "Number of Species") +
  theme_classic() +
  theme(axis.title = element_text(size = 11),
        panel.grid.minor = element_blank()) +
  scale_x_continuous(labels = scales::comma_format()) +
  scale_y_continuous(labels = scales::comma_format())

```

The GBIF taxon key mapping of species was saved in species

```{r taxon mapping summary}
#| label: fig-taxon-mapping-summary
#| fig-cap: "GBIF Taxonomic Matching Results"
#| echo: false
#| message: false
#| warning: false

# Load taxon key mapping data
taxon_key_mapping <- readRDS(here("data", "derived_data", "species_taxon_key_mapping_final_June28.rds"))

# Calculate summary statistics
total_species <- nrow(taxon_key_mapping)
successful_matches <- sum(!is.na(taxon_key_mapping$usageKey), na.rm = TRUE)
failed_matches <- sum(is.na(taxon_key_mapping$usageKey), na.rm = TRUE)
success_rate <- round((successful_matches / total_species) * 100, 1)


# Create visualization of match types
match_summary <- taxon_key_mapping |>
  count(match_type, name = "count") |>
  mutate(percentage = round((count / sum(count)) * 100, 1),
         label = paste0(match_type, "\n(", count, " - ", percentage, "%)"))

ggplot(match_summary, aes(x = reorder(match_type, count), y = count, fill = match_type)) +
  geom_col(alpha = 0.8, color = "white") +
  geom_text(aes(label = paste0(count, "\n(", percentage, "%)")), 
            vjust = -0.5, size = 3.5, fontface = "bold") +
  labs(x = "Match Type",
       y = "Number of Species") +
  theme_classic() +
  theme(axis.title = element_text(size = 11),
        legend.position = "none",
        panel.grid.minor = element_blank()) +
  scale_fill_manual(values = c("EXACT" = "steelblue",
                               "FUZZY" = "orange", 
                               "HIGHERRANK" = "lightgreen",
                               "NONE" = "lightcoral")) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
```

The breakdown of the match types revealed that there were 17 higher rank, 1 fuzzy and 2 records with no match at all.

```{r uncertain matches}
#| label: uncertain-matches-table
#| tbl-cap: "Species with fuzzy, no matches, or higher rank matches in GBIF"
#| echo: false
#| message: false
#| warning: false

# Get all problematic species (fuzzy, none, and higher rank)
problematic_species <- taxon_key_mapping |>
  filter(match_type %in% c("FUZZY", "NONE", "HIGHERRANK")) |>
  select(`Species Name` = species,
         `Match Type` = match_type,
         `Confidence` = confidence,
         `Status` = match_status) |>
  arrange(`Match Type`, `Species Name`)

# Create interactive table
DT::datatable(problematic_species,
    options = list(pageLength = 10,
                   lengthMenu = c(10, 25, 50, -1),
                   scrollX = TRUE,
                   dom = 'Bfrtip',
                   buttons = c('copy', 'csv', 'excel'),
                   columnDefs = list(list(width = '200px', targets = 0),
                                     list(width = '120px', targets = 1),
                                     list(width = '200px', targets = 2),
                                     list(width = '100px', targets = 3))),
    extensions = 'Buttons',
    filter = 'top',
    rownames = FALSE,
    class = 'cell-border stripe hover') |>
    # make species names italic
    DT::formatStyle(columns = c('Species Name', 'Match Type'),
                    fontStyle = 'italic') |>
    # color code by match type
    DT::formatStyle('Match Type',
                    backgroundColor = styleEqual(c("FUZZY", "NONE", "HIGHERRANK"),
                                                 c("lightyellow", "lightcoral", "lightblue"))) |>
    # color code confidence levels
    DT::formatStyle('Confidence',
                    backgroundColor = styleInterval(cuts = c(95, 98),
                                                    values = c("lightcoral", "lightyellow", "lightgreen")))
```
